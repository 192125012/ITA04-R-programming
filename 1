# 1. Create three vectors
numeric_vector <- c(1, 2, 3, 4, 5)
character_vector <- c('a', 'b', 'c', 'd', 'e')
logical_vector <- c(TRUE, FALSE, TRUE, FALSE, TRUE)

# Display content and type of vectors
print(numeric_vector)
print(class(numeric_vector))
print(character_vector)
print(class(character_vector))
print(logical_vector)
print(class(logical_vector))

# 2. Create exam_data dataframe
exam_data <- data.frame(
  name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'),
  score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5, 8, 19),
  attempts = c(1, 3, 2, 3, 2, 3, 1, 1, 2, 1),
  qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes')
)

# a. Extract 3rd and 5th rows with 1st and 3rd columns
exam_data_subset <- exam_data[c(3, 5), c(1, 3)]
print(exam_data_subset)

# b. Add a new column named country
Country <- c("USA","USA","USA","USA","UK","USA","USA","India","USA","USA")
exam_data$country <- Country
print(exam_data)

# c. Add new row(s) to existing data frame
new_exam_data <- data.frame(name = c('Robert', 'Sophia'), score = c(10.5, 9), attempts = c(1, 3), qualify = c('yes', 'no'))
exam_data <- rbind(exam_data, new_exam_data)
print(exam_data)

# d. Sort data frame by name and score
exam_data <- exam_data[order(exam_data$name, exam_data$score), ]
print(exam_data)

# e. Save data frame information to file and display
write.csv(exam_data, file = "exam_data.csv")
read_data <- read.csv("exam_data.csv")
print(read_data)

# 3. Create factor for height of women dataset
height_factor <- cut(women$height, breaks = 5, labels = c("Very Short", "Short", "Medium", "Tall", "Very Tall"))
print(height_factor)

# 4. Create an array
array_data <- array(c(1, 2, 3, 4, 5, 6), dim = c(2, 3, 1), dimnames = list(NULL, NULL, c("Matrix1")))
print(array_data)

# 5. Call the airquality dataset
data("airquality")
print(is.data.frame(airquality))
airquality_ordered <- airquality[order(airquality$Month, airquality$Day), ]
airquality_ordered <- airquality_ordered[, !colnames(airquality_ordered) %in% c("Solar.R", "Wind")]
print(airquality_ordered)

# 6. Load dataset
data("ChickWeight")
# i. Order data frame by "weight" grouped by "diet"
chick_weight_ordered <- ChickWeight[order(ChickWeight$diet, ChickWeight$weight), ]
# Extract last 6 records
last_6_records <- tail(chick_weight_ordered, 6)
print(last_6_records)
# ii. Melting function
melted_data <- melt(ChickWeight, id.vars = c("Chick", "Time", "Diet"))
# Cast function for mean value of weight grouped by Diet
casted_mean_weight <- dcast(melted_data, Diet ~ variable, fun.aggregate = mean)
print(casted_mean_weight)
# Cast function for mode of weight grouped by Diet
casted_mode_weight <- dcast(melted_data, Diet ~ variable, fun.aggregate = Mode)
print(casted_mode_weight)

# 7. Randomly sample the iris dataset
set.seed(123)
train_index <- sample(1:nrow(iris), 0.8 * nrow(iris))
train_data <- iris[train_index, ]
test_data <- iris[-train_index, ]
# Create logistics regression model
model <- glm(Species ~ Petal.Width + Petal.Length, data = train_data, family = "binomial")
# Predict probabilities
probabilities <- predict(model, newdata = test_data, type = "response")
# Create confusion matrix
conf_matrix <- table(predicted_classes, test_data$Species)
print(conf_matrix)

# 8. Extract five levels of factor
sample_letters <- sample(LETTERS, 10)
levels(factor(sample_letters))[1:5]

# 9. Create vector with random integer values
random_integers <- sample(-50:50, 10, replace = TRUE)
print(random_integers)

# 10. Print numbers from 1 to 100 with conditions
for (i in 1:100) {
  if (i %% 3 == 0 && i %% 5 == 0) {
    print("FizzBuzz")
  } else if (i %% 3 == 0) {
    print("Fizz")
  } else if (i %% 5 == 0) {
    print("Buzz")
  } else {
    print(i)
  }
}

# 11. Find factors of a given number
find_factors <- function(num) {
  factors <- NULL
  for (i in 1:num) {
    if (num %% i == 0) {
      factors <- c(factors, i)
    }
  }
  return(factors)
}
print(find_factors(12))

# 12. Create list of random numbers and count occurrences
random_numbers <- sample(1:10, 20, replace = TRUE)
count_occurrences <- table(random_numbers)
print(count_occurrences)

# 13. Titanic dataset exploration
# a. Bar chart to show details of "Survived" based on passenger class
barplot(table(Titanic$Class, Titanic$Survived), beside = TRUE, legend = TRUE)
# b. Modify plot based on gender of people who survived
barplot(table(Titanic$Class, Titanic$Survived, Titanic$Sex), beside = TRUE, legend = TRUE)
# c. Histogram of feature "Age"
hist(Titanic$Age)

# 14. Combine three arrays
array1 <- array(1:9, dim = c(3, 3))
array2 <- array(10:18, dim = c(3, 3))
array3 <- array(19:27, dim = c(3, 3))
combined_array <- array(c(array1, array2, array3), dim = c(9, 3))
print(combined_array)
